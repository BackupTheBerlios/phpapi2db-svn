<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VDMERLib</name>
    </assembly>
    <members>
        <member name="T:VDMERLib.EasyRouter.TCP.ClientReader">
            <summary>
            Class ClientReader
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.ClientReader.m_bContinue">
            <summary>
            true for thread loop
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.ClientReader.m_StreamIn">
            <summary>
            data input stream
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.ClientReader.m_ReaderThread">
            <summary>
            Reader thread for data from tcp server 
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.ClientReader.m_sDelimiter">
            <summary>
            SOH character used to parse FIX string 
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.ClientReader.m_sTCPBuffer">
            <summary>
            DataReader
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.ClientReader.#ctor(System.IO.StreamReader)">
            <summary>
            vanilla constuctor - take in the read stream from TCP server
            </summary>
            <param name="streamIn"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.ClientReader.ReadStream">
            <summary>
            Function to process data off the tcp stream - called from the worker thread
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.ClientReader.Start">
            <summary>
            Start the reading thread - process data off tcp strem in
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.ClientReader.Stop">
            <summary>
            Stop the worker thread , processing the tcp server data 
            </summary>
        </member>
        <member name="E:VDMERLib.EasyRouter.TCP.ClientReader.DataEvent">
            <summary>
            connection event 
            </summary>
        </member>
        <member name="E:VDMERLib.EasyRouter.TCP.ClientReader.DisconnectEvent">
            <summary>
            connection event 
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.TCP.ClientReader.Delimiter">
            <summary>
            Returns the SOH delimiter for fix message
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.TCP.ClientReader.EventFIXMessage">
            <summary>
            event delegate
            </summary>
            <param name="from"></param>
            <param name="args"></param>
        </member>
        <member name="T:VDMERLib.EasyRouter.TCP.ClientReader.EventDisconnectMessage">
            <summary>
            event delegate
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:VDMERLib.EasyRouter.TCP.FIXMessageEventArgs">
            <summary>
            Class FIXMessageEventArgs
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.FIXMessageEventArgs.m_MsgType">
            <summary>
            Msg FIX Constant 
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.FIXMessageEventArgs.m_Msg">
            <summary>
            ES FIX Message
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.FIXMessageEventArgs.#ctor(MESSAGEFIX3Lib.FIXMessage)">
            <summary>
            Event object holding fix data from exchange handler
            </summary>
            <param name="msg">FIX 4.2 Message</param>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.FIXMessageEventArgs.Finalize">
            <summary>
            destructor
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.FIXMessageEventArgs.ToString">
            <summary>
            To string
            </summary>
            <returns></returns>
        </member>
        <member name="P:VDMERLib.EasyRouter.TCP.FIXMessageEventArgs.Msg">
            <summary>
            public property accessor for FIX message object
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.TCP.FIXMessageEventArgs.MsgType">
            <summary>
            public property accessor for FIX message type for contained FIX message
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Structure.CommoditySymbol">
            <summary>
            Class CommoditySymbol
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Structure.StructureDataEventArg">
            <summary>
            StructureDataEventArg
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.StructureDataEventArg.m_Datatype">
            <summary>
            Data Type
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.StructureDataEventArg.#ctor(VDMERLib.EasyRouter.Structure.StructureDataType)">
            <summary>
            Constructor
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.StructureDataEventArg.DataType">
            <summary>
            Get Type
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.CommoditySymbol.m_Commodity">
            <summary>
            Commodity linked to this obejct
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.CommoditySymbol.m_ESTEMap">
            <summary>
            maps commodity symbol to all TE entity for this security type
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.CommoditySymbol.m_sSymbol">
            <summary>
            Commodity Symbol
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.CommoditySymbol.m_sCommodityDesc">
            <summary>
            Commodity Symbol Desc
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.CommoditySymbol.m_bSubscribed">
            <summary>
            Is subscribed
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.CommoditySymbol.#ctor(System.String,System.String,VDMERLib.EasyRouter.Structure.Commodity)">
            <summary>
            constructor
            </summary>
            <param name="sSymbol"></param>
            <param name="sCommodityDesc"></param>
            <param name="commodity"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.CommoditySymbol.GetTEInstrument(System.String)">
            <summary>
            get TE instrument
            </summary>
            <param name="sSymbol"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.CommoditySymbol.AddTEInstrument(System.String,EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
             Add new TE if it does not exsit
            </summary>
            <param name="sESTickerMnemonic"></param>
            <param name="FIXMsg"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.CommoditySymbol.ToString">
            <summary>
            To string
            </summary>
            <returns></returns>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.CommoditySymbol.CommodityObj">
            <summary>
            Get Commodity linked to this obejct
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.CommoditySymbol.CommoditySymbolCode">
            <summary>
            Commodity symbol
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.CommoditySymbol.CommodityDesc">
            <summary>
            Commodity symbol
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.CommoditySymbol.Subscribed">
            <summary>
            Accssor for subscription
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.CommoditySymbol.Map">
            <summary>
            Get the TE map
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.CommoditySymbol.Exchange">
            <summary>
            security exchange for the esexchange
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.CommoditySymbol.ESExchange">
            <summary>
            security exchange for the esexchange
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Prices.TradeData">
            <summary>
            Class TradeData
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Prices.PricesEventArg">
            <summary>
            PricesEventArg
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.PricesEventArg.m_OrderType">
            <summary>
            Price type
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.PricesEventArg.m_sSymbol">
            <summary>
            ES Ticker Mnemonic
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Prices.PricesEventArg.#ctor(VDMERLib.EasyRouter.Prices.PricesEventArg.PriceDataType)">
            <summary>
            Constructor
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Prices.PricesEventArg.#ctor">
            <summary>
            Vanilla
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Prices.PricesEventArg.DataType">
            <summary>
            Data type
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Prices.PricesEventArg.Symbol">
            <summary>
            ES Ticker Mnemonic
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Prices.PricesEventArg.PriceDataType">
            <summary>
            PriceDataType
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.PricesEventArg.PriceDataType.TradeData">
            <summary>
            tradedata
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.PricesEventArg.PriceDataType.MarketMode">
             <summary>
            marketmode
             </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.TradeData.m_eAskOrderType">
            <summary>
            Ask Price Type
            </summary>
            
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.TradeData.m_eBidOrderType">
            <summary>
            Bid Price Type
            </summary>
            
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.TradeData.m_Bid">
            <summary>
            bid
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.TradeData.m_Ask">
            <summary>
            ask
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.TradeData.m_Trade">
            <summary>
            Trade
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.TradeData.m_dClose">
            <summary>
            Close
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.TradeData.m_dSettlement">
            <summary>
            Settlement
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.TradeData.m_sSettlementTime">
            <summary>
            Settlement time
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.TradeData.m_sSettlementDate">
            <summary>
            Settlement date
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.TradeData.m_dPrevSettlement">
            <summary>
            Prev Settlement
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.TradeData.m_sPrevSettlementTime">
            <summary>
            Prev Settlement time
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.TradeData.m_sPrevSettlementDate">
            <summary>
            Prev Settlement date
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.TradeData.m_nTotalTradeVolume">
            <summary>
            Total traded volume
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.TradeData.m_bSnapshot">
            <summary>
            Indicates if is a snapshot
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Prices.TradeData.#ctor">
            <summary>
            Vanilla
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Prices.TradeData.DecodeFIX(EASYROUTERCOMCLIENTLib.IFIXMessage,System.Boolean)">
            <summary>
            Decode price FIX message
            </summary>
            <param name="FIXMsg"></param>
            <param name="bSnapFull"></param>
            <returns></returns>
        </member>
        <member name="P:VDMERLib.EasyRouter.Prices.TradeData.Close">
            <summary>
            Close
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Prices.TradeData.Settlement">
            <summary>
            Settlement
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Prices.TradeData.SettlementTime">
            <summary>
            Settlement time
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Prices.TradeData.SettlementDate">
            <summary>
            Settlement date
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Prices.TradeData.PrevSettlement">
            <summary>
            Prev Settlement
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Prices.TradeData.PrevSettlementTime">
            <summary>
            Prev Settlement time
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Prices.TradeData.PrevSettlementDate">
            <summary>
            Prev Settlement date
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Prices.TradeData.TotalTradeVolume">
            <summary>
            Total traded volume
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Prices.TradeData.SnapShot">
            <summary>
            public Property to get snapshot
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Prices.TradeData.Implied">
            <summary>
            Price Type (Implied or Actual)
            </summary>
            
        </member>
        <member name="T:VDMERLib.EasyRouter.Structure.StructureDataType">
            <summary>
            Class StructureDataType
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.StructureDataType.Unknown">
            <summary>
            unknown
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.StructureDataType.Commodity">
            <summary>
            Commodity
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.StructureDataType.SecurityExchange">
            <summary>
            security exchange
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.StructureDataType.TEInstrument">
            <summary>
            teinstrument
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.StructureDataType.ESExchange">
            <summary>
            esexchange
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.StructureDataType.EndOfResponses">
            <summary>
            end of security responses
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.EasyRouterClient.ERCSFIXClient">
            <summary>
            Specific for FIX
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient">
            <summary>
            Class ERCSClient
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.SubscribeAll">
            <summary>
            Constantf for price subscription
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RouterModule">
            <summary>
            Variable used to determine if it is an exchange component not a router component
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RouterChannel">
            <summary>
            Variable used to determine if it is an exchange component not a router component
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.m_sConnection">
            <summary>
            URL connection for ER
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.m_Router">
            <summary>
            Easy Router com client proxy
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.m_sEATScreen">
            <summary>
            Fuck knows 
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.m_OrderManagement">
            <summary>
            Class to handle storing/parsing of order/trade data
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.m_PriceManagement">
            <summary>
            Class to handle storing/parsing of price data
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.m_AccountManagement">
            <summary>
            Class to handle storing/parsing of account/risk data
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.m_subscriptionMap">
            <summary>
            request ESSxchange
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.m_sDSN">
            <summary>
            Set DSN to use for custon tick data
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.m_ERUser">
            <summary>
            User 
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.m_InstrumentManager">
            <summary>
            stores instrument and handles instrument subscription
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.m_bEnableAutoSubcription">
            <summary>
            if true will auto subcrible to all tradeble instruments - can be time consuming 
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.m_bEnableAutoPriceSubcription">
            <summary>
            if true will subcrible to tradeble instrument on recieving structured msg 
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.theLock">
            <summary>
            lock object used for static creation
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.m_objClient">
            <summary>
            static instance
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.GetInstance">
            <summary>
            Get Single Instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.#ctor">
            <summary>
            Constructor 
            </summary>
            <param name="sUsername"></param>
            <param name="sPassword"></param>
            <param name="sConnection"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.Initialize">
            <summary>
            Unused ....
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.UnInitialize">
            <summary>
            Unused........
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RegisterCallbacks">
            <summary>
            Register com events from er client 
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.UnRegisterCallBack">
            <summary>
            UnRegister com events from er client 
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.m_Router_RecvMarketDataMsg(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            recieve market update
            </summary>
            <param name="FIXMsg"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.m_Router_RecvOrderMsg(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            Recieves Account Message
            </summary>
            <param name="FIXMsg"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.m_Router_RecvGeneralMsg(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            Recieve account and logon message
            </summary>
            <param name="FIXMsg"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.UpdateComponentStatus(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            handle component status events 
            </summary>
            <param name="FIXMsg"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.m_Router_RecvStructureMsg(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            handle structre data
            </summary>
            <param name="FIXMsg"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.GetRemoteConnection">
            <summary>
            Calls er client to get connection details 
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.Logon(System.String,System.String,System.String,System.Boolean)">
            <summary>
            try to logon on to ER
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.Logoff">
            <summary>
            log off
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RequestStructure(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Request one structure data for specific TE
            </summary>
            <param name="sSecurityExchange"></param>
            <param name="sESExchange"></param>
            <param name="sSymbol"></param>
            <param name="sSecurityType"></param>
            <param name="sESTickerMnemonic"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RequestStructure(System.String,System.String,System.String,System.String)">
            <summary>
            Request all TE structure data for a specific commodity symbol and security type
            </summary>
            <param name="sSecurityExchange"></param>
            <param name="sESExchange"></param>
            <param name="sSymbol"></param>
            <param name="sSecurityType"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RequestStructure(System.String,System.String,System.String)">
            <summary>
            Request all TE structure data for a specific commodity
            </summary>
            <param name="sSecurityExchange"></param>
            <param name="sESExchange"></param>
            <param name="sSymbol"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RequestStructure(System.String,System.String)">
            <summary>
            Request all commodity for an ESExchange
            </summary>
            <param name="sSecurityExchange"></param>
            <param name="sESExchange"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RequestData(System.String)">
            <summary>
            Request all data for a Mnemonic
            </summary>
            <param name="sTEMnemonic"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.SubscribeTE(System.String)">
            <summary>
            Subscribe Price for TE
            </summary>
            <param name="sTEMnemonic">ES Instruemnt ID</param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.UnsubscribeTE(System.String)">
            <summary>
            Unsubscribe price for TE 
            </summary>
            <param name="sTEMnemonic">ES Instruemnt ID</param>
            <returns>retrun false if no TE is set, else true if request is sent</returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RequestStructure(System.String)">
            <summary>
            Request all ESExchange for a specific security exchange - 
            </summary>
            <param name="sSecurityExchange">"0" for all security exchanges</param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.CreatePasswordString">
            <summary>
            generate the magic password - takem from eat
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.GetUsername">
            <summary>
            return username as uppercase
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.SubmitNewOrder(VDMERLib.EasyRouter.Orders.OrderInfo)">
            <summary>
            Submit new order
            </summary>
            <param name="newOrder">Deatils fo teh order to be placed</param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.SubmitNewOrder(VDMERLib.EasyRouter.Orders.OrderInfo,System.Collections.Hashtable)">
            <summary>
            Submit new order
            </summary>
            <param name="newOrder">Deatils fo teh order to be placed</param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.SubmitNewOrder(System.String,System.Boolean,System.Nullable{System.Double},System.Int32,VDMERLib.EasyRouter.OrderType,VDMERLib.EasyRouter.TimeInForce)">
            <summary>
            Submit new order
            </summary>
            <param name="sTE">ES Ticker Mnemomic (internal ER symbol for instrument</param>
            <param name="bBuy">is it a buy or sell</param>
            <param name="dPrice">price of order</param>
            <param name="nVolume">volume of order</param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.PullOrder(System.Int32)">
            <summary>
            Pull existing order
            </summary>
            <param name="sPrimaryOrder">Priamry BOID id of the order (internal order ER id)</param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.PullOrder(VDMERLib.EasyRouter.Orders.OrderInfo)">
            <summary>
            Pulls order specified
            </summary>
            <param name="order">order info object</param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.EditOrder(VDMERLib.EasyRouter.Orders.OrderInfo,System.Nullable{System.Double},System.Int32)">
            <summary>
            Pass in the order information to be modified 
            </summary>
            <param name="order">order info object</param>
            <param name="dPrice">new price - enter old price if unchanged</param>
            <param name="nVolume">new volume - enter old volume if unchanged</param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.GetInstrument(System.String)">
            <summary>
            Get the instrument details info
            </summary>
            <param name="sTE">ES Ticker Mnenomic (internal ER instrument identifier</param>
            <returns></returns>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.m_CustomAccessor">
            <summary>
            private db accessor class object
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.AddHistoricalData(System.String,System.Double)">
            <summary>
            APJ - Allows entry of tick data into a db source
            </summary>
            <param name="sColumnName"></param>
            <param name="dTick"></param>
            <returns></returns>
        </member>
        <member name="P:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.Accounts">
            <summary>
            Class to handle storing/parsing of account/risk data
            </summary>
        </member>
        <member name="E:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RecvStructuredMsgEvent">
            <summary>
            Eventing structured messages
            </summary>
        </member>
        <member name="E:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RecvPriceMsgEvent">
            <summary>
            Eventing structured messages
            </summary>
        </member>
        <member name="E:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RecvExchangeStatusMsgEvent">
            <summary>
            Eventing exchange status messages
            </summary>
        </member>
        <member name="E:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RecvOrderMsgEvent">
            <summary>
            Eventing exchange status messages
            </summary>
        </member>
        <member name="E:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RecvGeneralMsgEvent">
            <summary>
            Eventing general status messages
            </summary>
        </member>
        <member name="E:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RecvRiskMsgEvent">
            <summary>
            Eventing risk messages
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.EnableAutoSubscription">
            <summary>
            if true will auto subcrible to all tradeble instruments - can be time consuming 
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.DSN">
            <summary>
            Database acccess DSN
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.EnablePriceSubscriptionToTEonStructuredEvent">
            <summary>
            if true will subcrible to tradeble instrument on recieving structured msg 
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.Connection">
            <summary>
            Connection string property
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.EATScreen">
            <summary>
            Eat Screen string property
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.OrderManagement">
            <summary>
            Returns a sorted list of orders
            </summary>        
        </member>
        <member name="P:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.PriceManagement">
            <summary>
            Returns a dictionary of prices
            </summary>        
        </member>
        <member name="T:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RecvStructuredMsg">
            <summary>
            new structured event delegate
            </summary>
            <param name="from"></param>
            <param name="args"></param>
        </member>
        <member name="T:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RecvPriceMsg">
            <summary>
            new structured event delegate
            </summary>
            <param name="from"></param>
            <param name="args"></param>
        </member>
        <member name="T:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RecvExchangeStatusMsg">
            <summary>
            new component event delegate
            </summary>
            <param name="from"></param>
            <param name="args"></param>
        </member>
        <member name="T:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RecvOrderMsg">
            <summary>
            new order event delegate
            </summary>
            <param name="from"></param>
            <param name="args"></param>
        </member>
        <member name="T:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RecvGeneralMsg">
            <summary>
            General Msg
            </summary>
            <param name="from"></param>
            <param name="args"></param>
        </member>
        <member name="T:VDMERLib.EasyRouter.EasyRouterClient.ERCSClient.RecvRiskMsg">
            <summary>
            Risk Msg
            </summary>
            <param name="from"></param>
            <param name="args"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSFIXClient.RegisterCallbacks">
            <summary>
            
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSFIXClient.UnRegisterCallBack">
            <summary>
            
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.ERCSFIXClient.GetInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:VDMERLib.EasyRouter.Structure.ESExchange">
            <summary>
            Class ESExchange
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.ESExchange.m_Exchange">
            <summary>
            Link to security exchange this belongs to
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.ESExchange.m_ESCommodityMap">
            <summary>
            add all commodity to this ESExchange
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.ESExchange.m_ESExchange">
            <summary>
            ES Exchange code 
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.ESExchange.m_sESExchangeDesc">
            <summary>
            ES Exchange Description
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.ESExchange.m_bSubscribed">
            <summary>
            Have we subscribed 
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.ESExchange.#ctor(System.String,System.String,VDMERLib.EasyRouter.Structure.SecurityExchange)">
            <summary>
            Constructor
            </summary>
            <param name="sESExchange"></param>
            <param name="sExchangeDesc"></param>
            <param name="exchange"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.ESExchange.AddCommodity(System.String,System.String,System.String)">
            <summary>
            add new commodity + commodity symbol to this esexchange
            </summary>
            <param name="sCommodity"></param>
            <param name="sSymbol"></param>
            <param name="sDesc"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.ESExchange.GetCommodity(System.String)">
            <summary>
            Find the commodity if exists and return
            </summary>
            <param name="sCommdity"></param>
            <returns></returns>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.ESExchange.SecurityExchangeObj">
            <summary>
            Link to security exchange this belongs to
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.ESExchange.ESExchangeCode">
            <summary>
            ES Exchange code
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.ESExchange.ESExchangeDesc">
            <summary>
            ES Exchange Description
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.ESExchange.Subscribed">
            <summary>
            Get and set to see if we have subscribed for this ESexchange
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.ESExchange.Map">
            <summary>
            list of all commodity security types for this esexchange
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.ESExchange.Exchange">
            <summary>
            security exchange for the esexchange
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Risk.RiskEventArg">
            <summary>
            PricesEventArg
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Risk.RiskEventArg.m_RiskType">
            <summary>
            Risk type
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Risk.RiskEventArg.#ctor(VDMERLib.EasyRouter.Risk.RiskEventArg.RiskDataType)">
            <summary>
            Constructor
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Risk.RiskEventArg.#ctor">
            <summary>
            Vanilla
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Risk.RiskEventArg.DataType">
            <summary>
            Data type
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Risk.RiskEventArg.RiskDataType">
            <summary>
            PriceDataType
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Risk.RiskEventArg.RiskDataType.Account">
            <summary>
            account level
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Risk.RiskEventArg.RiskDataType.Position">
             <summary>
            position level
             </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Risk.Position.m_sSymbol">
            <summary>
            ES Ticker Mnemonic
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Risk.Position.DecodeFIXGroup(MESSAGEFIX3Lib.IFIXGroup)">
            <summary>
            Decode position FIX message
            </summary>
            <param name="FIXGroup"></param>
            <returns></returns>
        </member>
        <member name="P:VDMERLib.EasyRouter.Risk.Position.PAL">
            <summary>
            PAL
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Risk.Position.RoundTrips">
            <summary>
            Round Trips
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Risk.Position.NumberFills">
            <summary>
            NumberFills
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Risk.Position.NetPosition">
            <summary>
            Net Position
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Risk.Position.Symbol">
            <summary>
            ES Ticker Mnemonic
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Risk.Position.AccountID">
            <summary>
            AccountID
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Orders.OrderInfo">
            <summary>
            Class OrderInfo
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Orders.OrderDataEventArg">
            <summary>
            Class OrderDataEventArg
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderDataEventArg.m_OrderType">
            <summary>
            Type of message
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderDataEventArg.#ctor(VDMERLib.EasyRouter.Orders.OrderDataEventArg.OrderDataType)">
            <summary>
            Constructor
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderDataEventArg.#ctor">
            <summary>
            Vanilla
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderDataEventArg.DataType">
            <summary>
            Get type
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Orders.OrderDataEventArg.OrderDataType">
            <summary>
            OrderDataType
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderDataEventArg.OrderDataType.Unknown">
            <summary>
            unknown
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderDataEventArg.OrderDataType.Trade">
            <summary>
            trade
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderDataEventArg.OrderDataType.Order">
            <summary>
            order
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderInfo.m_instrument">
            <summary>
            Instrument details for this order
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderInfo.m_dPrice">
            <summary>
            price of order
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderInfo.m_nOrderQty">
            <summary>
            total order quantity
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderInfo.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="instrument"></param>
            <param name="sTickerMnemonic"></param>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderInfo.m_sTickerMnemonic">
            <summary>
            ES Ticker mnemonic
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderInfo.#ctor(VDMERLib.EasyRouter.Orders.OrderInfo)">
            <summary>
            constructor
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderInfo.CreateFixMessage(MESSAGEFIX3Lib.FIXMsgConstants)">
            <summary>
            Generate a fix message
            </summary>
            <param name="MsgType"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderInfo.AddConstants(MESSAGEFIX3Lib.FIXMessage)">
            <summary>
            Basic defaults that are hard coded and not required
            </summary>
            <param name="message"></param>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderInfo.m_nPrimaryBOID">
            <summary>
            ES Primary BOID - ID for order
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderInfo.m_nSecondBOID">
            <summary>
            ES Secondary BOID - ID for order
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderInfo.m_nLeavesQty">
            <summary>
            remaining order quantity
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderInfo.m_nCumQty">
            <summary>
            total traded quantity
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderInfo.m_sClOrdID">
            <summary>
            ES FIX CLORID
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderInfo.m_sOrdID">
            <summary>
            Host Order ID
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderInfo.m_sExecutionReportStatus">
            <summary>
            Status type for the order 
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderInfo.m_sSide">
            <summary>
            Decription of side from MESSAGEFIX3Lib.FIXSideConstants
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderInfo.m_TransactTime">
            <summary>
            Time of transaction
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderInfo.ApplyChanges(VDMERLib.EasyRouter.Orders.OrderInfo)">
            <summary>
            Apply changes from another Order
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderInfo.ParseFix(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            Parse the FIX message for order details
            </summary>
            <param name="FIXMsg"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderInfo.SetPrice(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            Set the order price
            </summary>
            <param name="FIXMsg"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderInfo.SetStatus(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            set order status - exec type
            </summary>
            <param name="FIXMsg"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderInfo.ToString">
            <summary>
            Order details 
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderInfo.GetExecType(VDMERLib.EasyRouter.Orders.Status)">
            <summary>
            Converts Exec Type to friendly description
            </summary>
            <param name="sExecType"></param>
            <returns></returns>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.Instrument">
            <summary>
            Instrument details for this order
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.AvgPx">
            <summary>
            Average Price of fills
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.Price">
            <summary>
            price of order
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.OrderQty">
            <summary>
            total order quantity
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.OrderType">
             <summary>
             Order Type
             </summary>
            
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.TimeInForce">
            <summary>
            Time in Force
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.TickerMnemonic">
            <summary>
            ES Ticker mnemonic
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.PrimaryBOID">
            <summary>
            ES Primary BOID - ID for order
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.SecondBOID">
            <summary>
            ES Secondary BOID - ID for order
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.LeavesQty">
            <summary>
            remaining order quantity
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.CumQty">
            <summary>
            total traded quantity
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.ClOrdID">
            <summary>
            ES FIX CLORID
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.AccountID">
            <summary>
            AccountID
            </summary>
            
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.OrdID">
            <summary>
            Host Order ID
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.ExecutionReportStatus">
            <summary>
            Status type for the order 
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.Side">
            <summary>
            Decription of side from MESSAGEFIX3Lib.FIXSideConstants
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.IsBuy">
            <summary>
            Only valid if buy and sell are only options
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.IsSell">
            <summary>
            Only valid if buy and sell are only option
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderInfo.TransactTime">
            <summary>
            Time of transaction
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Risk.AccountManager.DecodeFIX(MESSAGEFIX3Lib.IFIXMessage)">
            <summary>
            Decode price FIX message
            </summary>
            <param name="FIXMsg"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Risk.AccountManager.FindAccount(System.Nullable{System.Int64},MESSAGEFIX3Lib.FIXMessage)">
            <summary>
            Find Account , if no account id provided then see if there is only
            one account , get these details and add the account ud to the outgoing fixmessage
            </summary>
            <param name="lAccountID"></param>
            <param name="message"></param>
            <returns>the account info object</returns>
        </member>
        <member name="T:VDMERLib.EasyRouter.Orders.TradeInfo">
            <summary>
            Class TradeInfo
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.TradeInfo.m_Legs">
            <summary>
            store trade legs of any
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.TradeInfo.m_sExecID">
            <summary>
            Trade ExecID
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.TradeInfo.m_nExecQty">
            <summary>
            Trade Quantity
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.TradeInfo.m_dTradePrice">
            <summary>
            Trade Price
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.TradeInfo.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="sTickerMnemonic"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.TradeInfo.HasLegs">
            <summary>
            Indicates if outright legs are available
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.TradeInfo.LegCount">
            <summary>
            Leg Count
            </summary>
            <returns>Number of trade legs for this trade</returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.TradeInfo.GetLeg(System.Int32)">
            <summary>
            Get TradeLeg by index
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.TradeInfo.ParseFix(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            Parse FIX msg to obtain trade information
            </summary>
            <param name="FIXMsg"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.TradeInfo.SetPrice(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            override base order price as this is a trade price
            </summary>
            <param name="FIXMsg"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.TradeInfo.ToString">
            <summary>
            Get a string summary of this trade object
            </summary>
            <returns></returns>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.TradeInfo.ExecID">
            <summary>
            Trade ExecID
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.TradeInfo.ExecQty">
            <summary>
            Trade Quantity
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.TradeInfo.TradePrice">
            <summary>
            Trade Price
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Prices.SecurityStatus">
            <summary>
            Class SecurityStatus
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Prices.SecurityStatus.m_status">
            <summary>
            List of market modes 
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Prices.SecurityStatus.#ctor">
            <summary>
            Vanilla
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Prices.SecurityStatus.DecodeFIX(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            Get Market mode from FIX Message
            </summary>
            <param name="FIXMsg"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Prices.SecurityStatus.ModeToString">
            <summary>
            list of all market modes in use friendly format
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Prices.SecurityStatus.ModeToString(System.String)">
            <summary>
            list of all market modes in use friendly format
            </summary>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Prices.SecurityStatus.ToString">
            <summary>
            list of all market modes in use friendly format
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Prices.SecurityStatus.GetMode(MESSAGEFIX3Lib.FIXSecurityTradingStatusConstants)">
            <summary>
            Get user friendly market mode description from market mode code
            </summary>
            <param name="constant"></param>
            <returns></returns>
        </member>
        <member name="P:VDMERLib.EasyRouter.Prices.SecurityStatus.Status">
            <summary>
            Returns the arraylist of market modes for this instrument
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.General.Logon">
            <summary>
            Logon
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.General.GeneralMsgEventArg">
            <summary>
            Class GeneralMsgEventArg
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.General.GeneralMsgEventArg.m_Datatype">
            <summary>
            get type
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.General.GeneralMsgEventArg.#ctor(VDMERLib.EasyRouter.General.GeneralMsgEventArg.GeneralDataType)">
            <summary>
            vanilla
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:VDMERLib.EasyRouter.General.GeneralMsgEventArg.DataType">
            <summary>
            get type
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.General.GeneralMsgEventArg.GeneralDataType">
            <summary>
            GeneralDataType
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.General.GeneralMsgEventArg.GeneralDataType.Unknown">
            <summary>
            unknown
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.General.GeneralMsgEventArg.GeneralDataType.Login">
            <summary>
            login
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.General.Logon.m_bLoginSuccess">
            <summary>
            status of logon request
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.General.Logon.m_bLogoff">
            <summary>
            status of logoff request
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.General.Logon.#ctor">
            <summary>
            Vanilla
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.General.Logon.ToString">
            <summary>
            To string 
            </summary>
            <returns></returns>
        </member>
        <member name="P:VDMERLib.EasyRouter.General.Logon.LoggedOn">
            <summary>
            public property for logon status
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.General.Logon.LoggedOff">
            <summary>
            public property for logoff status
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.General.Logon.Error">
            <summary>
            Get or Set Error String
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.General.Logon.ErrorCode">
            <summary>
            Login Error Codes
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.General.Logon.FailureCodes">
            <summary>
            Possible Login Failure Codes
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.User.ESUser">
            <summary>
            Class ESUser
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.User.ESUser.m_sUserName">
            <summary>
            ER client username
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.User.ESUser.m_sPassword">
            <summary>
            ER cleint Pwd
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.User.ESUser.#ctor">
            <summary>
            Vanilla
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.User.ESUser.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sPassword"></param>
            <param name="sUserName"></param>
        </member>
        <member name="P:VDMERLib.EasyRouter.User.ESUser.Username">
            <summary>
            Username
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.User.ESUser.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Orders.OrderManagement">
            <summary>
            Class OrderManagement
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderManagement.m_InstrumentManager">
            <summary>
            Access to instrument data
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderManagement.m_BuyOrdersAtPrice">
            <summary>
            Stores primary boid against OrderHistory
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderManagement.#ctor(VDMERLib.EasyRouter.Structure.InstrumentManager)">
            <summary>
            Vanilla
            </summary>
            <param name="instrumentMamager"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderManagement.GetOrder(System.Int32)">
            <summary>
            Get all OrderHistory for specific boid
            </summary>
            <param name="nKey"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderManagement.ProcessExecutionReport(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            Process FIX message for order or trade history
            </summary>
            <param name="FIXMsg"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderManagement.ProcessOrderCancelReject(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            to change - same as the above
            </summary>
            <param name="FIXMsg"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderManagement.GetMessageInfo(EASYROUTERCOMCLIENTLib.IFIXMessage,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Get Boid and exec type for FIX Order/trade message
            </summary>
            <param name="FIXMsg"></param>
            <param name="nPBOID"></param>
            <param name="nSBOID"></param>
            <param name="sExecType"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderManagement.GetCurrentOrder(System.Int32)">
            <summary>
            Gets the underlying current Order Information for apecific boid
            </summary>
            <param name="nPBOID"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderManagement.GetOrderHistory(System.Int32)">
            <summary>
            Gets the underlying Order History Information for specific boid
            </summary>
            <param name="nPBOID"></param>
            <returns></returns>
        </member>
        <member name="T:VDMERLib.EasyRouter.User.TickerDefaults">
            <summary>
            Class TickerDefaults
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.User.TickerDefaults.m_sExchange">
            <summary>
            Security Exchange code
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.User.TickerDefaults.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sExchange"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.User.TickerDefaults.AddDefaults(MESSAGEFIX3Lib.IFIXGroup)">
            <summary>
            Retrieve ticker information from FIX message
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.User.TickerDefaults.ApplyTickerDefaults(MESSAGEFIX3Lib.FIXMessage)">
            <summary>
            Apply ticker info to order ticket fix message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.User.TickerDefaults.ApplyTickerDefaults(MESSAGEFIX3Lib.FIXMessage,System.Collections.Hashtable)">
            <summary>
            Add Custom Ticker Defaults Tag
            </summary>
            <param name="message"></param>
            <param name="map"></param>
        </member>
        <member name="P:VDMERLib.EasyRouter.User.TickerDefaults.Exchange">
            <summary>
            Security Exchange code
            </summary>
        </member>
        <member name="T:VDMERLib.Database.SQLServer.ABCStoredProcedure">
            <summary>
            in development 
            </summary>
        </member>
        <member name="F:VDMERLib.Database.SQLServer.ABCStoredProcedure.m_sDSN">
            <summary>
            Connection string
            </summary>
        </member>
        <member name="F:VDMERLib.Database.SQLServer.ABCStoredProcedure.m_sqlConnection">
            <summary>
            Database connection objects
            </summary>
        </member>
        <member name="F:VDMERLib.Database.SQLServer.ABCStoredProcedure.m_sqlCommand">
            <summary>
            Database Command object
            </summary>
        </member>
        <member name="F:VDMERLib.Database.SQLServer.ABCStoredProcedure.m_sStoredProcedureName">
            <summary>
            name of procedure
            </summary>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.#ctor">
            <summary>
            Vanilla
            </summary>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.Finalize">
            <summary>
            Vanilla
            </summary>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.Open(System.Boolean)">
            <summary>
            Open connection
            </summary>
            <param name="bGlobal">Reuse connection</param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.Open">
            <summary>
            open connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.Init">
            <summary>
            intialise sql objects
            </summary>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.Close">
            <summary>
            Close sql connection
            </summary>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.ExecuteReader">
            <summary>
            Returns Data from Database
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.ExecuteNonQuery">
            <summary>
            No Record Set Returned
            </summary>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.AddVarcharParameter(System.String,System.String,System.Int32)">
            <summary>
            add char
            </summary>
            <param name="sParameterName"></param>
            <param name="sVal"></param>
            <param name="size"></param>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.AddTextParameter(System.String,System.String)">
            <summary>
            add text
            </summary>
            <param name="sParameterName"></param>
            <param name="sVal"></param>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.AddIntegerParameter(System.String,System.Int32)">
            <summary>
            add int
            </summary>
            <param name="sParameterName"></param>
            <param name="nVal"></param>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.AddTinyIntParameter(System.String,System.Int32)">
            <summary>
            add tiny int
            </summary>
            <param name="sParameterName"></param>
            <param name="nVal"></param>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.AddBitParameter(System.String,System.Int32)">
            <summary>
            add bit
            </summary>
            <param name="sParameterName"></param>
            <param name="nVal"></param>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.AddBitParameter(System.String,System.Boolean)">
            <summary>
            add bit
            </summary>
            <param name="sParameterName"></param>
            <param name="bVal"></param>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.AddDoubleParameter(System.String,System.Double)">
            <summary>
            add double
            </summary>
            <param name="sParameterName"></param>
            <param name="dVal"></param>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.AddDecimalParameter(System.String,System.Decimal)">
            <summary>
            add decimal
            </summary>
            <param name="sParameterName"></param>
            <param name="dVal"></param>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.AddDateTimeParameter(System.String,System.DateTime)">
            <summary>
            add datetime 
            </summary>
            <param name="sParameterName"></param>
            <param name="dtVal"></param>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.AddCharParameter(System.String,System.Char)">
            <summary>
            add var char
            </summary>
            <param name="sParameterName"></param>
            <param name="cVal"></param>
        </member>
        <member name="M:VDMERLib.Database.SQLServer.ABCStoredProcedure.ClearParameters">
            <summary>
            clear param
            </summary>
        </member>
        <member name="P:VDMERLib.Database.SQLServer.ABCStoredProcedure.DSN">
            <summary>
            Connection String
            </summary>
        </member>
        <member name="P:VDMERLib.Database.SQLServer.ABCStoredProcedure.TIMEOUT">
            <summary>
            Timeout
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Structure.SecurityExchange">
            <summary>
            Class SecurityExchange
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.SecurityExchange.m_ESExchangeMap">
            <summary>
            Stores the ESExchange Level objects for this security exchange
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.SecurityExchange.m_sExchange">
            <summary>
            Exchange name
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.SecurityExchange.m_sExchangeDesc">
            <summary>
            Exchange Description
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.SecurityExchange.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sExchange"></param>
            <param name="sExchangeDesc"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.SecurityExchange.AddESExchange(System.String,System.String)">
            <summary>
            add new ESExchange
            </summary>
            <param name="sESExchange"></param>
            <param name="sESExchangeDescription"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.SecurityExchange.GetESExchange(System.String)">
            <summary>
            get ESexchange
            </summary>
            <param name="sESExchange"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.SecurityExchange.Subscribed(System.String)">
            <summary>
            Have we subscribed to this EsExchange for the commodity level
            </summary>
            <param name="sESExchange"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.SecurityExchange.Subscribed(System.String,System.String,System.String)">
            <summary>
            Have we subscribed at this exexchange-commodity level 
            </summary>
            <param name="sESExchange"></param>
            <param name="sSymbol"></param>
            <param name="sSecurityType"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.SecurityExchange.SetSubscribed(System.String)">
            <summary>
            Set subscribed to ESExchange
            </summary>
            <param name="sESExchange"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.SecurityExchange.SetSubscribed(System.String,System.String,System.String)">
            <summary>
            Set subscribed to ESExchange-commodity level
            </summary>
            <param name="sESExchange"></param>
            <param name="sSymbol"></param>
            <param name="sSecurityType"></param>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.SecurityExchange.ExchangeCode">
            <summary>
            Exchange name
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.SecurityExchange.ExchangeDesc">
            <summary>
            Exchange Description
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.SecurityExchange.Map">
            <summary>
            Return the hashmap of ESExchange level objects
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Structure.TEInstrument">
            <summary>
            Class Easyscreen TEInstrument 
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_SecurityStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_bSubscribedAdditionalInfo">
            <summary>
            Get "R" - additional info
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_CommoditySymbol">
            <summary>
            commodity symbol object
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_sSymbol">
            <summary>
            Exchange symbol
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_sESTickerSymbol">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_sMDExchange">
            <summary>
            Used for reuter code for exchange when used with the ISIN (securityID)
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_sIDSource">
            <summary>
            Used for equity to descibe m_sMDExchange and securityID , eg isin sedol etc
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_eTimeType">
            <summary>
            FIXTimeType
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_eOrderType">
            <summary>
            FIXOrderType 
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_bESSupportEdit">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_lESPriceFormatCode">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_sESTickerMnemonic">
            <summary>
            Easyscreen internal symbol
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_sESTickerDesc">
            <summary>
            Easyscreen symbol description
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_nOptionType">
            <summary>
            Option type - defaults to Call
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_sSecurityID">
            <summary>
            Exchange 
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_sStrategyCode">
            <summary>
            Statagy code
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_sCombinedCommodityCode">
            <summary>
            Risk Combined commodity code
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_sClearingHouse">
            <summary>
            Clearing house
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_sCFICode">
            <summary>
            CFI Code
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_sCurrency">
            <summary>
            Currency
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_dUnitTickValue">
            <summary>
            unit tick value
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_dPriceMovement">
            <summary>
            Price movement for ofcourse the price
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.TEInstrument.#ctor(VDMERLib.EasyRouter.Structure.CommoditySymbol)">
            <summary>
            
            </summary>
            <param name="commoditySymbol"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.TEInstrument.ParseFIX(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            Parse msg for instrument data
            </summary>
            <param name="FIXMsg"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.TEInstrument.ApplyOrderDetails(MESSAGEFIX3Lib.FIXMessage)">
            <summary>
            Apply order details
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.TEInstrument.AdditonalUpdates(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            Additional instrument data
            </summary>
            <param name="FIXMsg"></param>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_nMonth">
            <summary>
            Expiry Month
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_nYear">
            <summary>
            Expiry Year
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.TEInstrument.ReceiveStructureUpdate(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            handle structure update
            </summary>
            <param name="FIXMsg"></param>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.TEInstrument.m_nFIXTagESPreferredRiskArrayType">
            <summary>
            default in eat
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.TEInstrument.CreateRiskArray(System.Int32,System.String)">
            <summary>
            create risk array
            </summary>
            <param name="nValue"></param>
            <param name="sValue"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.TEInstrument.ApplyRiskArray(MESSAGEFIX3Lib.FIXMessage)">
            <summary>
            Apply risk array
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.TEInstrument.ApplyRiskArray(MESSAGEFIX3Lib.FIXMessage,System.Int32)">
            <summary>
            Apply risk array to fix order message
            </summary>
            <param name="message"></param>
            <param name="nFIXTagESPreferredRiskArrayType"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.TEInstrument.ApplyRiskArray(MESSAGEFIX3Lib.FIXMessage,System.String[])">
            <summary>
            Apply risk array to fix order message
            </summary>
            <param name="message"></param>
            <param name="riskArray"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.TEInstrument.RequestStructure(VDMERLib.EasyRouter.EasyRouterClient.ERCSClient)">
            <summary>
            Request TE instrument
            </summary>
            <param name="client"></param>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.SecurityStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.CommoditySymbolObj">
            <summary>
            get commodity symbol object
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.Symbol">
            <summary>
            Exchange symbol
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.TickerSymbol">
            <summary>
            ?
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.SupportedTimeTypes">
            <summary>
            FIXTimeType 
            </summary>
            
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.SupportedOrderTypes">
            <summary>
            FIXOrderType 
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.ESTickerMnemonic">
            <summary>
            Easyscreen internal symbol
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.ESTickerDescription">
            <summary>
            Easyscreen symbol description
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.SecurityIDSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.UnitTick">
            <summary>
            Get unit tick value
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.PriceMovement">
            <summary>
            accessor
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.SecurityExchange">
            <summary>
            get security exchange code
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.ESExchange">
            <summary>
            Get esexchange code
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.Commodity">
            <summary>
            Get commodity symbol
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.CommodityType">
            <summary>
            Get commodity type
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.Month">
            <summary>
            Expiry Month
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.Year">
            <summary>
            Expiry Year
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.TEInstrument.SubscribedAdditional">
            <summary>
            Has been subscribed to
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Risk.Account">
            <summary>
            Account Info
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Risk.Account.m_strDescription">
            <summary>
            Account Description
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Risk.Account.m_TickerMap">
            <summary>
            string (exchange) against ticker default list
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Risk.Account.#ctor(System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="AccountID"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Risk.Account.DecodeFIXMessage(MESSAGEFIX3Lib.IFIXMessage)">
            <summary>
            Decode price FIX message
            </summary>
            <param name="FIXMsg"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Risk.Account.AddTicker(System.String,MESSAGEFIX3Lib.IFIXGroup)">
            <summary>
            Add Ticker defaults for this account
            </summary>
            <param name="sExchange"></param>
            <param name="group"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Risk.Account.GetTickerDefaults(System.String)">
            <summary>
            Get ticker defaults
            </summary>
            <param name="sExchange"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Risk.Account.ApplyDefaults(System.String,MESSAGEFIX3Lib.FIXMessage)">
            <summary>
            Apply ticker defaults
            </summary>
            <param name="sExchange"></param>
            <param name="message"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Risk.Account.ApplyDefaults(System.String,MESSAGEFIX3Lib.FIXMessage,System.Collections.Hashtable)">
            <summary>
            Apply ticker defaults
            </summary>
            <param name="sExchange"></param>
            <param name="message"></param>
        </member>
        <member name="P:VDMERLib.EasyRouter.Risk.Account.AccountName">
            <summary>
            Account Name
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Risk.Account.AccountCode">
            <summary>
            Account Code
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Risk.Account.Description">
            <summary>
            Account Description
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Risk.Account.Currency">
            <summary>
            Account Currency
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Risk.Account.Positions">
            <summary>
            Positions
            </summary>
        </member>
        <member name="T:VDMERLib.Database.DataAccess.CustomAccess">
            <summary>
            APJ allows writing of Trade info into a db source
            </summary>
        </member>
        <member name="F:VDMERLib.Database.DataAccess.CustomAccess.SP_InsertTick">
            <summary>
            Insert record
            </summary>
        </member>
        <member name="M:VDMERLib.Database.DataAccess.CustomAccess.#ctor(System.String)">
            <summary>
            vanilla construtor
            </summary>
            <param name="sDSN"></param>
        </member>
        <member name="M:VDMERLib.Database.DataAccess.CustomAccess.InsertTick(System.String,System.DateTime,System.String,System.Double)">
            <summary>
            Insert tick data
            </summary>
            <param name="sUsername"></param>
            <param name="dtTime"></param>
            <param name="sDataName"></param>
            <param name="dTick"></param>
            <returns></returns>
        </member>
        <member name="T:VDMERLib.EasyRouter.TCP.ConnectionEventArgs">
            <summary>
            Class ConnectionEventArgs
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.ConnectionEventArgs.m_State">
            <summary>
            tcp connection state
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.ConnectionEventArgs.#ctor(VDMERLib.EasyRouter.TCP.Client.State)">
            <summary>
            constructor for connection event 
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:VDMERLib.EasyRouter.TCP.ConnectionEventArgs.ConnectionState">
            <summary>
            get the current connectin state
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Orders.OrderHistory">
            <summary>
            Class OrderHistory
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderHistory.m_OrderHistory">
            <summary>
            Order History - stores a list of Trade and Order information
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderHistory.#ctor(VDMERLib.EasyRouter.Orders.OrderInfo)">
            <summary>
            Constructor
            </summary>
            <param name="firstOrder"></param>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.OrderHistory.m_CurrentOrder">
            <summary>
            This Order  object stores the current order state from the updated order and trade messages 
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.OrderHistory.UpdateOrder(VDMERLib.EasyRouter.Orders.OrderInfo)">
            <summary>
            Update the current order with the FIX message trade or order update
            </summary>
            <param name="order"></param>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderHistory.CurrentOrder">
            <summary>
            Pbulic property to get the Order object that stores the current order state from the updated order and trade messages 
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.OrderHistory.Key">
            <summary>
            Get the priamry boid - identifier in ER system
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Structure.InstrumentManager">
            <summary>
            Class InstrumentManager
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.InstrumentManager.m_directTEMap">
            <summary>
            Direct ESTickerMnemonic to TEInstrument infromation
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.InstrumentManager.AddDirectTE(VDMERLib.EasyRouter.Structure.TEInstrument)">
            <summary>
            Add REInstrument to Local hashtable of ESTickerMnemonic
            </summary>
            <param name="instrument">returns Tradable Entity Information</param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.InstrumentManager.GetDirectTE(System.String)">
            <summary>
            Get TEInstrument from TicketMnemonic
            </summary>
            <param name="sTE">TicketMnemonic</param>
            <returns></returns>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.InstrumentManager.m_InstrumentMap">
            <summary>
            Map of Security  Exchanges
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.InstrumentManager.#ctor">
            <summary>
            Vanilla
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.InstrumentManager.HandleCompletionUpdate(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.InstrumentManager.GetSecurityExchange(System.String)">
            <summary>
            Get the security exchange if it exists
            </summary>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.InstrumentManager.HandleSecurityUpdate(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            Process Security FIX Update message
            </summary>
            <param name="FIXMsg"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.InstrumentManager.HandleESExchangeUpdate(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            Process ESExchange FIX Update message
            </summary>
            <param name="FIXMsg"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.InstrumentManager.HandleTEInstrumentUpdate(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            Process Tradable Entity Instrument FIX Update message
            </summary>
            <param name="FIXMsg"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.InstrumentManager.FindByISINandExchange(System.String,System.String)">
            <summary>
            used to locate an equity by Exchange Reuters ID and ISIN 
            </summary>
            <param name="sSecurityID"></param>
            <param name="sExchange"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.InstrumentManager.HandleCommodityUpdate(EASYROUTERCOMCLIENTLib.IFIXMessage)">
            <summary>
            Process Commodity FIX Update message
            </summary>
            <param name="FIXMsg"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.InstrumentManager.AddExchange(System.String,System.String)">
            <summary>
            Add Security Exchange to instrument map if does not exist
            </summary>
            <param name="sExchange">Security Exchange ID</param>
            <param name="sDescription">"Security Exchange Description</param>
            <returns>Either Creates new SecurityExchange if does not exist or retrives existing from Instruemnt Map</returns> 
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.InstrumentManager.GetExchange(System.String)">
            <summary>
            Get the security exchange 
            </summary>
            <param name="sExchange">Security Exchange ID</param>
            <returns>returns SecurityExchange if exists in Instrument map else null</returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.InstrumentManager.Subscribed(System.String,System.String)">
            <summary>
            HAve we subscribed at ESExchange level for the products
            </summary>
            <param name="sExchange">Security Exchange ID</param>
            <param name="sESExchange">ESExchange ID</param>
            <returns>true if we have sent subscription request</returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.InstrumentManager.Subscribed(System.String,System.String,System.String,System.String)">
            <summary>
            Have we subscribed at commodity level for the products
            </summary>
            <param name="sExchange">Security Exchange ID</param>
            <param name="sESExchange">ESExchange ID</param>
            <param name="sSymbol">Symbol ID</param>
            <param name="sSecurityType">Security Type eg "OPT" for options</param>
            <returns>true if we have sent subscription request</returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.InstrumentManager.SetSubscribed(System.String,System.String)">
            <summary>
            Set ESExchange as subscribed
            </summary>
            <param name="sExchange"></param>
            <param name="sESExchange"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.InstrumentManager.SetSubscribed(System.String,System.String,System.String,System.String)">
            <summary>
            Set Commodity as subscribed
            </summary>
            <param name="sExchange"></param>
            <param name="sESExchange"></param>
            <param name="sSymbol"></param>
            <param name="sSecurityType"></param>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.InstrumentManager.Map">
            <summary>
            Property to access the instrument map which stores SecurityExchange
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.Structure.Commodity">
            <summary>
            Class Commodity
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.Commodity.m_ESExchange">
            <summary>
            link to the EXExchange this commodity belongs to
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.Commodity.m_ESCommoditySymbolMap">
            <summary>
            map of commodity tye to commodity symbol
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Structure.Commodity.m_sCommodity">
            <summary>
            security type code
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.Commodity.#ctor(System.String,VDMERLib.EasyRouter.Structure.ESExchange)">
            <summary>
            Constructor
            </summary>
            <param name="sCommodity"></param>
            <param name="exchange"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.Commodity.AddCommoditySymbol(System.String,System.String)">
            <summary>
            Add commodity symbol
            </summary>
            <param name="sSymbol"></param>
            <param name="sCommodityDesc"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.Commodity.GetCommoditySymbol(System.String)">
            <summary>
            get a commodity symbol
            </summary>
            <param name="sSymbol"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.Structure.Commodity.GetCommoditySymbol(System.String,System.String,System.Boolean)">
            <summary>
            Generic future to get and add Commodity symbol
            </summary>
            <param name="sSymbol"></param>
            <param name="sCommodityDesc"></param>
            <param name="bAdded"></param>
            <returns></returns>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.Commodity.ESExchangeObj">
            <summary>
            link to the EXExchange this commodity belongs to
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.Commodity.CommodityCode">
            <summary>
            security type code
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Structure.Commodity.Map">
            <summary>
            Get the commodity symbol map that is associated to this commodity type
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs">
            <summary>
            Class ComponentStatusArgs
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.m_sType">
            <summary>
            component type
            public const string esFIXComponentCategoryOrders = "O";
            public const string esFIXComponentCategoryPricesBest = "B";
            public const string esFIXComponentCategoryPricesDepth = "D";
            public const string esFIXComponentCategoryStructure = "S";
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.m_sExchange">
            <summary>
            Security Exchange code
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.m_sExchangeDesc">
            <summary>
            Security Exchange description
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.m_eType">
            <summary>
            component status Status
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sType"></param>
            <param name="sExchange"></param>
            <param name="sExchangeDesc"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.SetStatus(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the component status 
            </summary>
            <param name="nActive"></param>
            <param name="nWaiting"></param>
            <param name="nInactive"></param>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.GetStatus">
            <summary>
            Get the current status
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.GetStatusAsString">
            <summary>
            Get status as user friendly string
            </summary>
            <returns></returns>
        </member>
        <member name="M:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.GetComponentAsString">
            <summary>
            Get component type as use friendly string
            </summary>
            <returns></returns>
        </member>
        <member name="P:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.Exchange">
            <summary>
            Security Exchange code
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.ExchangeDesc">
            <summary>
            Security Exchange description
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.ComponentType">
            <summary>
            component type
            public const string esFIXComponentCategoryOrders = "O";
            public const string esFIXComponentCategoryPricesBest = "B";
            public const string esFIXComponentCategoryPricesDepth = "D";
            public const string esFIXComponentCategoryStructure = "S";
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.Status">
            <summary>
            easyrouter component status enum
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.Status.eUnknown">
            <summary>
            unknown
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.Status.eActive">
            <summary>
            active
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.Status.eWaiting">
            <summary>
            waiting
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.Status.eWaitingActive">
            <summary>
            waiting active
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.Status.eInactive">
            <summary>
            inactive
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.Status.eInactiveActive">
            <summary>
            inactive active
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.Status.eInactiveWaiting">
            <summary>
            inactive waiting 
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.EasyRouterClient.Data.ComponentStatusArgs.Status.eALL">
            <summary>
            all
            </summary>
        </member>
        <member name="P:VDMERLib.Database.SQLServer.BulkInsert.DSN">
            <summary>
            Connection String
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.TCP.Client">
            <summary>
            Class Client
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.Client.#ctor(System.Int32,System.String)">
            <summary>
            constructor
            </summary>
            <param name="nPort">ip port to connect</param>
            <param name="sIPAddress">address to connect to</param>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.Client.Finalize">
            <summary>
            destructor
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.Client.Start">
            <summary>
            Begin thread to connect
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.Client.Connect">
            <summary>
            connection to tcp server
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.Client.Stop">
            <summary>
            stop connection thread and tcp connection if established
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.Client.SendFIXMsg(MESSAGEFIX3Lib.FIXMessage)">
            <summary>
            write data to the tcp server 
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.Client.SetEventFIXMessageHandler(System.Boolean)">
            <summary>
            set up event handler to recieve fix data from client reader tcp data stream
            </summary>
            <param name="bEnable"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.Client.EventFIXMessage(System.Object,VDMERLib.EasyRouter.TCP.FIXMessageEventArgs)">
            <summary>
            Event raised when FIX data mesage is recieved 
            </summary>
            <param name="from"></param>
            <param name="args"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.Client.RecvFIXMsg(MESSAGEFIX3Lib.FIXMsgConstants,MESSAGEFIX3Lib.FIXMessage)">
            <summary>
            virtual function to handle incoming data
            </summary>
            <param name="msgType"></param>
            <param name="msg"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.Client.RecvFIXDriverMsg(MESSAGEFIX3Lib.FIXMessage)">
            <summary>
            default implemtation to driver status message + logout from exchange orders - does nothing 
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.Client.RecvFIXOrderMsg(MESSAGEFIX3Lib.FIXMessage)">
            <summary>
            default implemtation to handle orders - does nothing 
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.Client.RecvFIXPriceMsg(MESSAGEFIX3Lib.FIXMessage)">
            <summary>
            default implemtation to handle market price data - does nothing 
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.Client.RecvFIXStatusMsg(MESSAGEFIX3Lib.FIXMessage)">
            <summary>
            default implemtation to handle market status - does nothing 
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:VDMERLib.EasyRouter.TCP.Client.Disconnect(System.IO.ErrorEventArgs)">
            <summary>
             disconnect event has occured from tcp layer
            </summary>
            <param name="e">Exception that caused the disconnect store in the ErrorEventArgs</param>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.Client.m_ConnectionThread">
            <summary>
            Connection thread
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.Client.m_ConnectionState">
            <summary>
            state of connection
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.Client.m_nPort">
            <summary>
            connection port
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.Client.m_sIPAddress">
            <summary>
            ipaddress of server to connect to
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.Client.m_Client">
            <summary>
            c# socket class 
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.Client.m_bContinue">
            <summary>
            set Connection variable to true for thread loop
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.Client.m_nTimeOut">
            <summary>
            Connection wait in millisecs 
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.Client.m_NetworkStream">
            <summary>
            network stream to get the read and write stream
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.Client.m_StreamOut">
            <summary>
            stream out - write msg to server
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.Client.m_StreamIn">
            <summary>
            stream to read message from tcp server
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.Client.m_Reader">
            <summary>
            handles incomming packets 
            </summary>
        </member>
        <member name="E:VDMERLib.EasyRouter.TCP.Client.ConnectionEvent">
            <summary>
            connection event 
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.TCP.Client.IP">
            <summary>
            IPAddress for the tcp server to connect to
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.TCP.Client.Port">
            <summary>
            port used by the tcp server to connect to
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.TCP.Client.State">
            <summary>
            enum representing state of the tcp connection
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.Client.State.Unknown">
            <summary>
            unknown
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.Client.State.Connecting">
            <summary>
            connecting
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.Client.State.Connected">
            <summary>
            connected
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.Client.State.Disconnected">
            <summary>
            disconnected
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.TCP.Client.State.Disconnecting">
            <summary>
            disconnected
            </summary>
        </member>
        <member name="T:VDMERLib.EasyRouter.TCP.Client.EventConnection">
            <summary>
            event delegate
            </summary>
            <param name="from"></param>
            <param name="args"></param>
        </member>
        <member name="T:VDMERLib.EasyRouter.Orders.TradeLegs">
            <summary>
            Class TradeLegs
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.TradeLegs.m_sUnderlyingTickerMnemonic">
            <summary>
            ES Ticker Mnemonic
            </summary>
        </member>
        <member name="M:VDMERLib.EasyRouter.Orders.TradeLegs.#ctor">
            <summary>
            Vanilla
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.TradeLegs.m_sExecID">
            <summary>
            Trade ExecID
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.TradeLegs.m_nExecQty">
            <summary>
            Trade Quantity
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.TradeLegs.m_dTradePrice">
            <summary>
            Trade Price
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.TradeLegs.m_sSide">
            <summary>
            Side of order as a string represneted by MESSAGEFIX3Lib.FIXSideConstants
            </summary>
        </member>
        <member name="F:VDMERLib.EasyRouter.Orders.TradeLegs.m_nLegNumber">
            <summary>
            Leg number
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.TradeLegs.UnderlyingTickerMnemonic">
            <summary>
            Get  ES Ticker Mnemonic Property
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.TradeLegs.ExecID">
            <summary>
            Get Trade Exec ID
            /// </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.TradeLegs.ExecQty">
            <summary>
            Trade Quantity
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.TradeLegs.TradePrice">
            <summary>
            Trade Price
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.TradeLegs.Side">
            <summary>
            Side of order as a string represneted by MESSAGEFIX3Lib.FIXSideConstants
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.TradeLegs.IsBuy">
            <summary>
            Usage, only if the instrument supports buy or sell
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.TradeLegs.IsSell">
            <summary>
            Usage, only if the instrument supports buy or sell
            </summary>
        </member>
        <member name="P:VDMERLib.EasyRouter.Orders.TradeLegs.LegNumber">
            <summary>
            Leg number
            </summary>
        </member>
        <member name="T:VDMERLib.Database.Constants">
            <summary>
            Summary description for Constants.
            </summary>
        </member>
        <member name="F:VDMERLib.Database.Constants.VDM_DSN">
            <summary>
            in development 
            </summary>
        </member>
        <member name="M:VDMERLib.Database.Constants.#ctor">
            <summary>
            in development 
            </summary>
        </member>
    </members>
</doc>
